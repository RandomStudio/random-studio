/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/Mainspace/models/Mainspace/mainspace.gltf -t --types --output src/models/Mainspace.tsx
*/

import React, { useMemo } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';
import { Vector2, Mesh, MeshStandardMaterial } from 'three';
import useHomeAssistant from '../components/Wonder2/hooks/useHomeAssistant';

type GLTFResult = GLTF & {
  nodes: {
    Cube032: Mesh;
    ['Metal_H-Beam001']: Mesh;
    Runway_Wood005: Mesh;
    Plant_pots: Mesh;
    ID549002: Mesh;
    ID549002_1: Mesh;
    GILLIS250: Mesh;
  };
  materials: {
    ['default']: MeshStandardMaterial;
    Gray: MeshStandardMaterial;
    ['Wood Fine Veneer Oak']: MeshStandardMaterial;
    ['Plaster Lime']: MeshStandardMaterial;
    ['Aluminium Brushed']: MeshStandardMaterial;
    ['Cork Surface']: MeshStandardMaterial;
  };
};

const Mainspace = (props: JSX.IntrinsicElements['group']) => {
  const { nodes, materials } = useGLTF(
    '/models/Mainspace/mainspace.gltf',
  ) as GLTFResult;

  const { value } = useHomeAssistant<string>('binary_sensor.knx_alarm_main_2');

  const corkMaterial = useMemo(() => {
    const material = materials['Cork Surface'].clone();
    material.roughness = 5;
    material.metalness = 0.5;
    material.normalScale = new Vector2(5, 5);

    return material;
  }, [materials]);

  const plasterMaterial = useMemo(() => {
    const material = materials['Plaster Lime'].clone();
    material.roughness = 1;
    material.metalness = 0;
    material.normalScale = new Vector2(5, 5);

    return material;
  }, [materials]);

  const wood = useMemo(() => {
    const material = materials['Wood Fine Veneer Oak'].clone();
    material.roughness = 1;
    material.metalness = 0;
    material.normalScale = new Vector2(10, 10);

    return material;
  }, [materials]);

  useFrame(() => {
    if (!wood.map) {
      return;
    }

    if (value === 'off') {
      wood.map.offset.x = 0;

      return;
    }

    wood.map.offset.x += 0.001;
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes['Metal_H-Beam001'].geometry}
        material={materials.Gray}
        position={[2.499, 0.085, 2]}
      />

      <mesh
        geometry={nodes.Runway_Wood005.geometry}
        material={wood}
        position={[-0.424, -1.972, -5.057]}
        rotation={[0, -0.262, 0]}
      />

      <mesh
        geometry={nodes.Plant_pots.geometry}
        material={plasterMaterial}
        position={[0.068, -1.588, 0.45]}
      />

      <group position={[-0.051, -1.131, 5.531]}>
        <mesh
          geometry={nodes.ID549002.geometry}
          material={materials['Aluminium Brushed']}
        />

        <mesh geometry={nodes.ID549002_1.geometry} material={corkMaterial} />
      </group>

      <instancedMesh
        args={[nodes.GILLIS250.geometry, materials['Wood Fine Veneer Oak'], 5]}
        // @ts-expect-error Ignore
        instanceMatrix={nodes.GILLIS250.instanceMatrix}
      />
    </group>
  );
};

useGLTF.preload('/models/Mainspace/mainspace.gltf');
export default Mainspace;
