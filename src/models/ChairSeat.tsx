/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/ChairSeat/ChairSeat.glb -t --types --instanceall --output src/models/ChairSeat.tsx
Files: public/models/ChairSeat/ChairSeat.glb [86.42KB] > /Users/andrew/repos/random/random-studio/src/models/models/ChairSeat/ChairSeat.glb [86.51KB] (0%)
*/

import React, { useRef, useMemo, useContext, createContext } from 'react';
import { useGLTF, Merged } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { Mesh, MeshStandardMaterial } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    Chair: Mesh;
  };
  materials: {
    ['SEAT_FABRIC.004']: MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

const context = createContext({} as ContextType);

export const ChairSeatInstances = ({
  children,
  ...props
}: JSX.IntrinsicElements['group']) => {
  const { nodes } = useGLTF('/models/ChairSeat/ChairSeat.glb') as GLTFResult;

  const instances = useMemo(
    () => ({
      Chair: nodes.Chair,
    }),
    [nodes],
  );

  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => (
        <context.Provider children={children} value={instances} />
      )}
    </Merged>
  );
};

const ChairSeat = (props: JSX.IntrinsicElements['group']) => {
  const instances = useContext(context);

  return (
    <group {...props} dispose={null}>
      <instances.Chair
        position={[0.002, -0.57, 0.03]}
        rotation={[Math.PI / 2, 0, 1.926]}
        scale={0.032}
      />
    </group>
  );
};

useGLTF.preload('/models/ChairSeat/ChairSeat.glb');
export default ChairSeat;
