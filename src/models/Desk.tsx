/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/Desk/models/Desk/desk.gltf -t --types --instanceall --output src/models/Desk.tsx
Files: public/models/Desk/models/Desk/desk.gltf [3.57KB] > /Users/andrew/repos/random/random-studio/src/models/desk-transformed.glb [356.12KB] (-9875%)
*/

import * as THREE from 'three';
import React, { useRef, useMemo, useContext, createContext } from 'react';
import { useGLTF, Merged } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Desk_Studio007: THREE.Mesh;
  };
  materials: {
    ['MDF Gray']: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

const context = createContext({} as ContextType);

export const DeskInstances = ({
  children,
  ...props
}: JSX.IntrinsicElements['group']) => {
  const { nodes } = useGLTF('/models/Desk/Desk.gltf') as GLTFResult;

  const instances = useMemo(
    () => ({
      DeskStudio: nodes.Desk_Studio007,
    }),
    [nodes],
  );

  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => (
        <context.Provider children={children} value={instances} />
      )}
    </Merged>
  );
};

const Desk = (props: JSX.IntrinsicElements['group']) => {
  const instances = useContext(context);

  return (
    <group {...props} dispose={null}>
      <instances.DeskStudio
        position={[-0.304, 0.357, 0.133]}
        rotation={[0, 1.571, 0]}
      />
    </group>
  );
};

useGLTF.preload('/desk-transformed.glb');
export default Desk;
